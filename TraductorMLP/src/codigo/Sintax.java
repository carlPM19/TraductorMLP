
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 28 14:10:42 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 28 14:10:42 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\014\000\002\006\011\000" +
    "\002\014\006\000\002\014\007\000\002\014\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\006\000\002\014\007\000\002\007\015\000\002\011\011" +
    "\000\002\012\013\000\002\013\020\000\002\015\012\000" +
    "\002\015\011\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\010\007\000\002\010\010\000\002\010" +
    "\011\000\002\010\012\000\002\010\013\000\002\010\014" +
    "\000\002\016\010\000\002\016\016\000\002\016\006\000" +
    "\002\016\016\000\002\017\006\000\002\017\006\000\002" +
    "\017\007\000\002\017\010\000\002\017\011\000\002\017" +
    "\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\020\004\014\013\023\014\011\016\007\021" +
    "\006\022\020\023\004\001\002\000\004\044\164\001\002" +
    "\000\026\002\ufff5\006\ufff5\013\ufff5\014\ufff5\016\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\037\ufff5\001\002\000\004" +
    "\034\156\001\002\000\006\034\136\036\137\001\002\000" +
    "\026\002\ufff2\006\ufff2\013\ufff2\014\ufff2\016\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\037\ufff2\001\002\000\004\006" +
    "\117\001\002\000\026\002\ufffd\006\ufffd\013\ufffd\014\ufffd" +
    "\016\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\037\ufffd\001" +
    "\002\000\004\002\116\001\002\000\026\002\uffff\006\uffff" +
    "\013\uffff\014\uffff\016\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\037\uffff\001\002\000\026\002\ufff7\006\ufff7\013\ufff7" +
    "\014\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\037" +
    "\ufff7\001\002\000\026\002\ufffc\006\ufffc\013\ufffc\014\ufffc" +
    "\016\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\037\ufffc\001" +
    "\002\000\022\002\000\013\023\014\011\016\007\020\044" +
    "\021\006\022\020\023\004\001\002\000\004\036\037\001" +
    "\002\000\026\002\ufff0\006\ufff0\013\ufff0\014\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\037\ufff0\001\002\000" +
    "\026\002\ufffa\006\ufffa\013\ufffa\014\ufffa\016\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\037\ufffa\001\002\000\004\044" +
    "\024\001\002\000\010\040\026\044\027\045\025\001\002" +
    "\000\026\002\uffef\006\uffef\013\uffef\014\uffef\016\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\037\uffef\001\002\000\004" +
    "\015\030\001\002\000\026\002\uffee\006\uffee\013\uffee\014" +
    "\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee\037\uffee" +
    "\001\002\000\004\046\031\001\002\000\004\044\032\001" +
    "\002\000\004\026\033\001\002\000\004\046\034\001\002" +
    "\000\004\044\035\001\002\000\004\041\036\001\002\000" +
    "\026\002\uffed\006\uffed\013\uffed\014\uffed\016\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\037\uffed\001\002\000\020\004" +
    "\014\013\023\014\011\016\007\021\006\022\020\023\004" +
    "\001\002\000\022\013\023\014\011\016\007\020\044\021" +
    "\006\022\020\023\004\037\047\001\002\000\026\002\ufff6" +
    "\006\ufff6\013\ufff6\014\ufff6\016\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\037\ufff6\001\002\000\026\002\ufff3\006\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\037\ufff3\001\002\000\026\002\ufffe\006\ufffe\013\ufffe" +
    "\014\ufffe\016\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\037" +
    "\ufffe\001\002\000\004\036\106\001\002\000\026\002\ufff8" +
    "\006\ufff8\013\ufff8\014\ufff8\016\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\037\ufff8\001\002\000\026\002\ufffb\006\ufffb" +
    "\013\ufffb\014\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\037\ufffb\001\002\000\004\036\054\001\002\000\026" +
    "\002\ufff1\006\ufff1\013\ufff1\014\ufff1\016\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\037\ufff1\001\002\000\026\002\ufff9" +
    "\006\ufff9\013\ufff9\014\ufff9\016\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\037\ufff9\001\002\000\004\020\044\001\002" +
    "\000\026\002\ufff4\006\ufff4\013\ufff4\014\ufff4\016\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\037\ufff4\001\002\000\010" +
    "\033\056\044\060\046\057\001\002\000\004\037\076\001" +
    "\002\000\006\035\uffe9\037\uffe9\001\002\000\004\044\071" +
    "\001\002\000\004\030\061\001\002\000\012\006\063\033" +
    "\064\044\065\045\062\001\002\000\006\035\uffe7\037\uffe7" +
    "\001\002\000\006\006\066\044\067\001\002\000\006\035" +
    "\uffe8\037\uffe8\001\002\000\006\035\uffe6\037\uffe6\001\002" +
    "\000\006\035\uffe5\037\uffe5\001\002\000\004\006\070\001" +
    "\002\000\006\035\uffe4\037\uffe4\001\002\000\004\030\072" +
    "\001\002\000\006\045\073\046\074\001\002\000\006\035" +
    "\uffeb\037\uffeb\001\002\000\004\044\075\001\002\000\006" +
    "\035\uffea\037\uffea\001\002\000\004\036\077\001\002\000" +
    "\004\012\100\001\002\000\004\044\101\001\002\000\004" +
    "\037\102\001\002\000\004\036\103\001\002\000\020\004" +
    "\014\013\023\014\011\016\007\021\006\022\020\023\004" +
    "\001\002\000\022\013\023\014\011\016\007\020\044\021" +
    "\006\022\020\023\004\037\105\001\002\000\026\002\uffe0" +
    "\006\uffe0\013\uffe0\014\uffe0\016\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\037\uffe0\001\002\000\020\004\014\013\023" +
    "\014\011\016\007\021\006\022\020\023\004\001\002\000" +
    "\022\013\023\014\011\016\007\020\044\021\006\022\020" +
    "\023\004\037\110\001\002\000\004\021\111\001\002\000" +
    "\004\034\112\001\002\000\010\033\056\044\060\046\057" +
    "\001\002\000\004\035\114\001\002\000\004\043\115\001" +
    "\002\000\026\002\uffe1\006\uffe1\013\uffe1\014\uffe1\016\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\037\uffe1\001\002\000" +
    "\004\002\001\001\002\000\022\004\014\013\023\014\011" +
    "\016\007\021\006\022\020\023\004\044\121\001\002\000" +
    "\022\006\135\013\023\014\011\016\007\020\044\021\006" +
    "\022\020\023\004\001\002\000\006\006\122\044\123\001" +
    "\002\000\026\002\uffd0\006\uffd0\013\uffd0\014\uffd0\016\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\037\uffd0\001\002\000" +
    "\006\006\124\044\125\001\002\000\026\002\uffce\006\uffce" +
    "\013\uffce\014\uffce\016\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\037\uffce\001\002\000\006\006\126\044\127\001\002" +
    "\000\026\002\uffcd\006\uffcd\013\uffcd\014\uffcd\016\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\037\uffcd\001\002\000\006" +
    "\006\130\044\131\001\002\000\026\002\uffcc\006\uffcc\013" +
    "\uffcc\014\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\037\uffcc\001\002\000\004\046\132\001\002\000\004\044" +
    "\133\001\002\000\004\006\134\001\002\000\026\002\uffcb" +
    "\006\uffcb\013\uffcb\014\uffcb\016\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\037\uffcb\001\002\000\026\002\uffcf\006\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\037\uffcf\001\002\000\010\033\056\044\060\046\057" +
    "\001\002\000\010\033\056\044\060\046\057\001\002\000" +
    "\004\037\141\001\002\000\004\036\142\001\002\000\020" +
    "\004\014\013\023\014\011\016\007\021\006\022\020\023" +
    "\004\001\002\000\022\013\023\014\011\016\007\020\044" +
    "\021\006\022\020\023\004\037\144\001\002\000\026\002" +
    "\uffec\006\uffec\013\uffec\014\uffec\016\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\037\uffec\001\002\000\004\035\146\001" +
    "\002\000\004\036\147\001\002\000\020\004\014\013\023" +
    "\014\011\016\007\021\006\022\020\023\004\001\002\000" +
    "\022\013\023\014\011\016\007\020\044\021\006\022\020" +
    "\023\004\037\151\001\002\000\004\017\152\001\002\000" +
    "\004\036\153\001\002\000\020\004\014\013\023\014\011" +
    "\016\007\021\006\022\020\023\004\001\002\000\022\013" +
    "\023\014\011\016\007\020\044\021\006\022\020\023\004" +
    "\037\155\001\002\000\026\002\uffe3\006\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\037\uffe3" +
    "\001\002\000\010\033\056\044\060\046\057\001\002\000" +
    "\004\035\160\001\002\000\004\036\161\001\002\000\020" +
    "\004\014\013\023\014\011\016\007\021\006\022\020\023" +
    "\004\001\002\000\022\013\023\014\011\016\007\020\044" +
    "\021\006\022\020\023\004\037\163\001\002\000\026\002" +
    "\uffe2\006\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\037\uffe2\001\002\000\004\036\165\001" +
    "\002\000\006\006\166\024\167\001\002\000\004\045\221" +
    "\001\002\000\004\036\204\001\002\000\010\006\166\024" +
    "\167\037\171\001\002\000\026\002\uffda\006\uffda\013\uffda" +
    "\014\uffda\016\uffda\020\uffda\021\uffda\022\uffda\023\uffda\037" +
    "\uffda\001\002\000\010\006\166\024\167\037\173\001\002" +
    "\000\026\002\uffd9\006\uffd9\013\uffd9\014\uffd9\016\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\037\uffd9\001\002\000\010" +
    "\006\166\024\167\037\175\001\002\000\026\002\uffd8\006" +
    "\uffd8\013\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\037\uffd8\001\002\000\010\006\166\024\167\037" +
    "\177\001\002\000\026\002\uffd7\006\uffd7\013\uffd7\014\uffd7" +
    "\016\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\037\uffd7\001" +
    "\002\000\010\006\166\024\167\037\201\001\002\000\026" +
    "\002\uffd6\006\uffd6\013\uffd6\014\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\037\uffd6\001\002\000\004\037\203" +
    "\001\002\000\026\002\uffd5\006\uffd5\013\uffd5\014\uffd5\016" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\037\uffd5\001\002" +
    "\000\020\004\014\013\023\014\205\016\007\021\006\022" +
    "\020\023\004\001\002\000\004\006\210\001\002\000\022" +
    "\013\023\014\011\016\007\020\044\021\006\022\020\023" +
    "\004\037\207\001\002\000\010\006\uffd2\024\uffd2\037\uffd2" +
    "\001\002\000\022\004\014\013\023\014\011\016\007\021" +
    "\006\022\020\023\004\044\211\001\002\000\006\006\122" +
    "\044\212\001\002\000\006\006\124\044\213\001\002\000" +
    "\006\006\126\044\214\001\002\000\006\006\130\044\215" +
    "\001\002\000\006\044\216\046\132\001\002\000\004\006" +
    "\217\001\002\000\004\037\220\001\002\000\010\006\uffd1" +
    "\024\uffd1\037\uffd1\001\002\000\004\006\222\001\002\000" +
    "\004\036\223\001\002\000\020\004\014\013\023\014\224" +
    "\016\007\021\006\022\020\023\004\001\002\000\006\006" +
    "\117\044\227\001\002\000\022\013\023\014\011\016\007" +
    "\020\044\021\006\022\020\023\004\037\226\001\002\000" +
    "\010\006\uffd4\024\uffd4\037\uffd4\001\002\000\004\044\230" +
    "\001\002\000\004\044\231\001\002\000\004\044\232\001" +
    "\002\000\004\044\233\001\002\000\004\044\234\001\002" +
    "\000\004\037\235\001\002\000\010\006\uffd3\024\uffd3\037" +
    "\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\024\002\012\003\016\004\011\006\015\007" +
    "\014\010\021\011\004\013\007\017\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\042\006\045\007\044\010\050" +
    "\011\040\012\051\013\041\017\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\037\004\011\006\015" +
    "\007\014\010\021\011\004\013\007\017\020\001\001\000" +
    "\022\004\042\006\045\007\044\010\050\011\040\012\051" +
    "\013\041\017\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\052\001\001\000\002\001\001" +
    "\000\004\014\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\103\004\011\006\015\007\014" +
    "\010\021\011\004\013\007\017\020\001\001\000\022\004" +
    "\042\006\045\007\044\010\050\011\040\012\051\013\041" +
    "\017\047\001\001\000\002\001\001\000\022\003\106\004" +
    "\011\006\015\007\014\010\021\011\004\013\007\017\020" +
    "\001\001\000\022\004\042\006\045\007\044\010\050\011" +
    "\040\012\051\013\041\017\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\117\004\011\006\015\007\014\010\021\011" +
    "\004\013\007\017\020\001\001\000\022\004\042\006\045" +
    "\007\044\010\050\011\040\012\051\013\041\017\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\144\001\001\000\004\014\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\142\004" +
    "\011\006\015\007\014\010\021\011\004\013\007\017\020" +
    "\001\001\000\022\004\042\006\045\007\044\010\050\011" +
    "\040\012\051\013\041\017\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\147\004" +
    "\011\006\015\007\014\010\021\011\004\013\007\017\020" +
    "\001\001\000\022\004\042\006\045\007\044\010\050\011" +
    "\040\012\051\013\041\017\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\153\004\011\006\015\007" +
    "\014\010\021\011\004\013\007\017\020\001\001\000\022" +
    "\004\042\006\045\007\044\010\050\011\040\012\051\013" +
    "\041\017\047\001\001\000\002\001\001\000\004\014\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\161\004\011\006\015\007\014\010\021\011\004\013\007" +
    "\017\020\001\001\000\022\004\042\006\045\007\044\010" +
    "\050\011\040\012\051\013\041\017\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\171\001\001" +
    "\000\002\001\001\000\004\016\173\001\001\000\002\001" +
    "\001\000\004\016\175\001\001\000\002\001\001\000\004" +
    "\016\177\001\001\000\002\001\001\000\004\016\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\205\004\011\006\015\007\014\010\021\011" +
    "\004\013\007\017\020\001\001\000\002\001\001\000\022" +
    "\004\042\006\045\007\044\010\050\011\040\012\051\013" +
    "\041\017\047\001\001\000\002\001\001\000\022\003\117" +
    "\004\011\006\015\007\014\010\021\011\004\013\007\017" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\224\004\011\006\015\007" +
    "\014\010\021\011\004\013\007\017\020\001\001\000\002" +
    "\001\001\000\022\004\042\006\045\007\044\010\050\011" +
    "\040\012\051\013\041\017\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINT ::= Puts Comillas Identificador Identificador Identificador Identificador Identificador Dolar Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRINT ::= Puts Comillas Identificador Identificador Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRINT ::= Puts Comillas Identificador Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PRINT ::= Puts Comillas Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRINT ::= Puts Comillas SENTENCIA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRINT ::= Puts Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_SWITCH ::= Default Llave_a Puts Comillas Identificador Identificador Identificador Identificador Identificador Identificador Comillas Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_SWITCH ::= Default Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_SWITCH ::= Comillas Numero Comillas Llave_a Puts Identificador Identificador Identificador Identificador Identificador Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_SWITCH ::= Comillas Numero Comillas Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= For Llave_a SENTENCIA Llave_c Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a Incrementar Identificador Llave_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_BOOLEANA ::= Dolar Identificador Op_relacional Dolar Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_BOOLEANA ::= Dolar Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= If Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Set Identificador Corchete_a Expr Dolar Identificador Op_aritmetico Dolar Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Set Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Set Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= Comentarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

