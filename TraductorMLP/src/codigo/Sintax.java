
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 28 17:38:00 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 28 17:38:00 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\014\000\002\004\013\000\002\004\015\000\002" +
    "\006\011\000\002\006\012\000\002\006\012\000\002\006" +
    "\011\000\002\006\011\000\002\014\006\000\002\014\007" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\006\000\002\014\007\000\002" +
    "\007\015\000\002\011\011\000\002\011\011\000\002\012" +
    "\013\000\002\013\020\000\002\015\012\000\002\015\011" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\021\016\000\002\010\007\000\002\010\010\000\002" +
    "\010\011\000\002\010\012\000\002\010\013\000\002\010" +
    "\014\000\002\016\010\000\002\016\016\000\002\016\006" +
    "\000\002\016\016\000\002\017\006\000\002\017\006\000" +
    "\002\017\011\000\002\017\013\000\002\017\007\000\002" +
    "\017\010\000\002\017\011\000\002\017\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\022\004\013\013\022\014\015\016\016\024" +
    "\024\025\004\026\021\030\014\001\002\000\004\042\274" +
    "\001\002\000\036\002\ufff5\006\ufff5\013\ufff5\014\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\030\ufff5\043\ufff5\001\002\000\024\002\000\013" +
    "\022\014\015\016\016\023\066\024\024\025\004\026\021" +
    "\030\014\001\002\000\036\002\ufffd\006\ufffd\013\ufffd\014" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\030\ufffd\043\ufffd\001\002\000\036\002" +
    "\ufffa\006\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\043" +
    "\ufffa\001\002\000\036\002\ufffc\006\ufffc\013\ufffc\014\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\030\ufffc\043\ufffc\001\002\000\036\002\ufff7" +
    "\006\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\043\ufff7" +
    "\001\002\000\036\002\uffff\006\uffff\013\uffff\014\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\030\uffff\043\uffff\001\002\000\004\050\261\001" +
    "\002\000\004\006\214\001\002\000\006\040\231\042\232" +
    "\001\002\000\036\002\ufff0\006\ufff0\013\ufff0\014\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\030\ufff0\043\ufff0\001\002\000\036\002\uffee\006" +
    "\uffee\013\uffee\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\043\uffee\001" +
    "\002\000\004\050\132\001\002\000\004\050\106\001\002" +
    "\000\036\002\ufff2\006\ufff2\013\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\030\ufff2\043\ufff2\001\002\000\006\006\027\042\030\001" +
    "\002\000\004\002\026\001\002\000\004\002\001\001\002" +
    "\000\010\037\032\050\034\052\033\001\002\000\010\037" +
    "\032\050\034\052\033\001\002\000\004\043\052\001\002" +
    "\000\010\006\uffe1\041\uffe1\043\uffe1\001\002\000\004\050" +
    "\045\001\002\000\004\034\035\001\002\000\012\006\037" +
    "\037\040\050\041\051\036\001\002\000\010\006\uffdf\041" +
    "\uffdf\043\uffdf\001\002\000\006\006\042\050\043\001\002" +
    "\000\010\006\uffe0\041\uffe0\043\uffe0\001\002\000\010\006" +
    "\uffde\041\uffde\043\uffde\001\002\000\010\006\uffdd\041\uffdd" +
    "\043\uffdd\001\002\000\004\006\044\001\002\000\010\006" +
    "\uffdc\041\uffdc\043\uffdc\001\002\000\004\034\046\001\002" +
    "\000\006\051\047\052\050\001\002\000\010\006\uffe3\041" +
    "\uffe3\043\uffe3\001\002\000\004\050\051\001\002\000\010" +
    "\006\uffe2\041\uffe2\043\uffe2\001\002\000\004\042\053\001" +
    "\002\000\022\004\013\013\022\014\015\016\016\024\024" +
    "\025\004\026\021\030\014\001\002\000\024\013\022\014" +
    "\015\016\016\023\066\024\024\025\004\026\021\030\014" +
    "\043\061\001\002\000\036\002\ufff6\006\ufff6\013\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\030\ufff6\043\ufff6\001\002\000\036\002" +
    "\ufffe\006\ufffe\013\ufffe\014\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe\043" +
    "\ufffe\001\002\000\036\002\ufff9\006\ufff9\013\ufff9\014\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\021\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\030\ufff9\043\ufff9\001\002\000\036\002\ufffb" +
    "\006\ufffb\013\ufffb\014\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\043\ufffb" +
    "\001\002\000\036\002\uffda\006\uffda\013\uffda\014\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\030\uffda\043\uffda\001\002\000\036\002\ufff8\006" +
    "\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\043\ufff8\001" +
    "\002\000\004\023\066\001\002\000\036\002\ufff1\006\ufff1" +
    "\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\043\ufff1\001\002" +
    "\000\036\002\uffef\006\uffef\013\uffef\014\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\030\uffef\043\uffef\001\002\000\004\042\070\001\002\000" +
    "\036\002\ufff3\006\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030" +
    "\ufff3\043\ufff3\001\002\000\022\004\013\013\022\014\015" +
    "\016\016\024\024\025\004\026\021\030\014\001\002\000" +
    "\024\013\022\014\015\016\016\023\066\024\024\025\004" +
    "\026\021\030\014\043\072\001\002\000\004\024\073\001" +
    "\002\000\004\040\074\001\002\000\010\037\032\050\034" +
    "\052\033\001\002\000\004\041\076\001\002\000\004\047" +
    "\077\001\002\000\036\002\uffd8\006\uffd8\013\uffd8\014\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\030\uffd8\043\uffd8\001\002\000\036\002\ufff4" +
    "\006\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\043\ufff4" +
    "\001\002\000\004\006\102\001\002\000\004\042\103\001" +
    "\002\000\022\004\013\013\022\014\015\016\016\024\024" +
    "\025\004\026\021\030\014\001\002\000\024\013\022\014" +
    "\015\016\016\023\066\024\024\025\004\026\021\030\014" +
    "\043\105\001\002\000\036\002\uffd9\006\uffd9\013\uffd9\014" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\030\uffd9\043\uffd9\001\002\000\010\044" +
    "\110\050\111\051\107\001\002\000\036\002\uffed\006\uffed" +
    "\013\uffed\014\uffed\016\uffed\017\uffed\020\uffed\021\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\030\uffed\043\uffed\001\002" +
    "\000\004\015\112\001\002\000\036\002\uffec\006\uffec\013" +
    "\uffec\014\uffec\016\uffec\017\uffec\020\uffec\021\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\030\uffec\043\uffec\001\002\000" +
    "\006\042\113\052\114\001\002\000\004\052\124\001\002" +
    "\000\004\050\115\001\002\000\004\032\116\001\002\000" +
    "\006\051\117\052\120\001\002\000\004\045\123\001\002" +
    "\000\004\050\121\001\002\000\004\045\122\001\002\000" +
    "\036\002\uffeb\006\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\043\uffeb\001\002\000\036\002\uffea\006\uffea\013\uffea" +
    "\014\uffea\016\uffea\017\uffea\020\uffea\021\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\030\uffea\043\uffea\001\002\000\004" +
    "\050\125\001\002\000\004\032\126\001\002\000\004\051" +
    "\127\001\002\000\004\043\130\001\002\000\004\045\131" +
    "\001\002\000\036\002\uffe9\006\uffe9\013\uffe9\014\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\030\uffe9\043\uffe9\001\002\000\004\042\133\001" +
    "\002\000\006\006\134\027\135\001\002\000\004\051\206" +
    "\001\002\000\004\042\152\001\002\000\010\006\134\027" +
    "\135\043\137\001\002\000\036\002\uffd0\006\uffd0\013\uffd0" +
    "\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\030\uffd0\043\uffd0\001\002\000\010" +
    "\006\134\027\135\043\141\001\002\000\036\002\uffcf\006" +
    "\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\043\uffcf\001" +
    "\002\000\010\006\134\027\135\043\143\001\002\000\036" +
    "\002\uffce\006\uffce\013\uffce\014\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce" +
    "\043\uffce\001\002\000\010\006\134\027\135\043\145\001" +
    "\002\000\036\002\uffcd\006\uffcd\013\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\030\uffcd\043\uffcd\001\002\000\010\006\134\027\135" +
    "\043\147\001\002\000\036\002\uffcc\006\uffcc\013\uffcc\014" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\030\uffcc\043\uffcc\001\002\000\004\043" +
    "\151\001\002\000\036\002\uffcb\006\uffcb\013\uffcb\014\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\030\uffcb\043\uffcb\001\002\000\022\004\013" +
    "\013\022\014\153\016\016\024\024\025\004\026\021\030" +
    "\014\001\002\000\004\006\156\001\002\000\024\013\022" +
    "\014\015\016\016\023\066\024\024\025\004\026\021\030" +
    "\014\043\155\001\002\000\010\006\uffc8\027\uffc8\043\uffc8" +
    "\001\002\000\024\004\013\013\022\014\015\016\016\024" +
    "\024\025\004\026\021\030\014\050\160\001\002\000\024" +
    "\006\205\013\022\014\015\016\016\023\066\024\024\025" +
    "\004\026\021\030\014\001\002\000\006\006\161\050\162" +
    "\001\002\000\036\002\uffc6\006\uffc6\013\uffc6\014\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\030\uffc6\043\uffc6\001\002\000\010\006\163\050" +
    "\165\052\164\001\002\000\036\002\uffc2\006\uffc2\013\uffc2" +
    "\014\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\030\uffc2\043\uffc2\001\002\000\004" +
    "\050\203\001\002\000\006\006\166\050\167\001\002\000" +
    "\036\002\uffc1\006\uffc1\013\uffc1\014\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030" +
    "\uffc1\043\uffc1\001\002\000\010\006\170\050\172\052\171" +
    "\001\002\000\036\002\uffc0\006\uffc0\013\uffc0\014\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\030\uffc0\043\uffc0\001\002\000\004\050\201\001" +
    "\002\000\006\050\174\052\173\001\002\000\004\050\177" +
    "\001\002\000\004\006\175\001\002\000\004\043\176\001" +
    "\002\000\010\006\uffc7\027\uffc7\043\uffc7\001\002\000\004" +
    "\006\200\001\002\000\036\002\uffbf\006\uffbf\013\uffbf\014" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\030\uffbf\043\uffbf\001\002\000\004\006" +
    "\202\001\002\000\036\002\uffc3\006\uffc3\013\uffc3\014\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\030\uffc3\043\uffc3\001\002\000\004\006\204" +
    "\001\002\000\036\002\uffc4\006\uffc4\013\uffc4\014\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\030\uffc4\043\uffc4\001\002\000\036\002\uffc5\006" +
    "\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5\043\uffc5\001" +
    "\002\000\004\006\207\001\002\000\004\042\210\001\002" +
    "\000\022\004\013\013\022\014\211\016\016\024\024\025" +
    "\004\026\021\030\014\001\002\000\006\006\214\050\215" +
    "\001\002\000\024\013\022\014\015\016\016\023\066\024" +
    "\024\025\004\026\021\030\014\043\213\001\002\000\010" +
    "\006\uffca\027\uffca\043\uffca\001\002\000\024\004\013\013" +
    "\022\014\015\016\016\024\024\025\004\026\021\030\014" +
    "\050\224\001\002\000\004\050\216\001\002\000\004\050" +
    "\217\001\002\000\004\050\220\001\002\000\004\050\221" +
    "\001\002\000\004\050\222\001\002\000\004\043\223\001" +
    "\002\000\010\006\uffc9\027\uffc9\043\uffc9\001\002\000\006" +
    "\006\161\050\225\001\002\000\010\006\163\050\226\052" +
    "\164\001\002\000\006\006\166\050\227\001\002\000\010" +
    "\006\170\050\230\052\171\001\002\000\004\052\173\001" +
    "\002\000\010\037\032\050\034\052\033\001\002\000\010" +
    "\037\032\050\034\052\033\001\002\000\004\043\234\001" +
    "\002\000\004\042\235\001\002\000\026\004\013\013\022" +
    "\014\015\016\016\020\240\021\236\024\024\025\004\026" +
    "\021\030\014\001\002\000\004\043\247\001\002\000\030" +
    "\013\022\014\015\016\016\020\243\021\242\023\066\024" +
    "\024\025\004\026\021\030\014\043\244\001\002\000\004" +
    "\043\241\001\002\000\036\002\uffe4\006\uffe4\013\uffe4\014" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\030\uffe4\043\uffe4\001\002\000\004\043" +
    "\246\001\002\000\004\043\245\001\002\000\036\002\uffe8" +
    "\006\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\043\uffe8" +
    "\001\002\000\036\002\uffe7\006\uffe7\013\uffe7\014\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\030\uffe7\043\uffe7\001\002\000\036\002\uffe6\006" +
    "\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\043\uffe6\001" +
    "\002\000\036\002\uffe5\006\uffe5\013\uffe5\014\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\030\uffe5\043\uffe5\001\002\000\004\041\251\001\002" +
    "\000\004\042\252\001\002\000\022\004\013\013\022\014" +
    "\015\016\016\024\024\025\004\026\021\030\014\001\002" +
    "\000\024\013\022\014\015\016\016\023\066\024\024\025" +
    "\004\026\021\030\014\043\254\001\002\000\004\022\255" +
    "\001\002\000\004\042\256\001\002\000\022\004\013\013" +
    "\022\014\015\016\016\024\024\025\004\026\021\030\014" +
    "\001\002\000\024\013\022\014\015\016\016\023\066\024" +
    "\024\025\004\026\021\030\014\043\260\001\002\000\036" +
    "\002\uffdb\006\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb" +
    "\043\uffdb\001\002\000\004\042\262\001\002\000\004\050" +
    "\263\001\002\000\004\050\264\001\002\000\004\043\265" +
    "\001\002\000\004\042\266\001\002\000\022\004\013\013" +
    "\022\014\015\016\016\024\024\025\004\026\021\030\014" +
    "\001\002\000\024\013\022\014\015\016\016\017\270\023" +
    "\066\024\024\025\004\026\021\030\014\001\002\000\004" +
    "\052\271\001\002\000\004\050\272\001\002\000\004\043" +
    "\273\001\002\000\036\002\uffd1\006\uffd1\013\uffd1\014\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\030\uffd1\043\uffd1\001\002\000\022\004\013" +
    "\013\022\014\015\016\016\024\024\025\004\026\021\030" +
    "\014\001\002\000\024\013\022\014\015\016\016\023\066" +
    "\024\024\025\004\026\021\030\014\043\276\001\002\000" +
    "\004\042\277\001\002\000\010\037\032\050\034\052\033" +
    "\001\002\000\004\043\301\001\002\000\004\042\302\001" +
    "\002\000\004\012\303\001\002\000\004\050\304\001\002" +
    "\000\004\043\305\001\002\000\004\042\306\001\002\000" +
    "\022\004\013\013\022\014\015\016\016\024\024\025\004" +
    "\026\021\030\014\001\002\000\024\013\022\014\015\016" +
    "\016\023\066\024\024\025\004\026\021\030\014\043\310" +
    "\001\002\000\036\002\uffd7\006\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\030\uffd7\043\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\026\002\024\003\005\004\006\006\010\007" +
    "\011\010\007\011\004\013\022\017\016\021\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\055\006" +
    "\057\007\061\010\056\011\054\012\062\013\066\017\063" +
    "\021\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\100\001\001\000\004\014\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\053" +
    "\004\006\006\010\007\011\010\007\011\004\013\022\017" +
    "\016\021\017\001\001\000\024\004\055\006\057\007\061" +
    "\010\056\011\054\012\062\013\066\017\063\021\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\070\004" +
    "\006\006\010\007\011\010\007\011\004\013\022\017\016" +
    "\021\017\001\001\000\024\004\055\006\057\007\061\010" +
    "\056\011\054\012\062\013\066\017\063\021\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\103\004\006\006\010\007\011\010\007\011\004" +
    "\013\022\017\016\021\017\001\001\000\024\004\055\006" +
    "\057\007\061\010\056\011\054\012\062\013\066\017\063" +
    "\021\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\137\001\001\000\002\001\001\000" +
    "\004\016\141\001\001\000\002\001\001\000\004\016\143" +
    "\001\001\000\002\001\001\000\004\016\145\001\001\000" +
    "\002\001\001\000\004\016\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\153\004" +
    "\006\006\010\007\011\010\007\011\004\013\022\017\016" +
    "\021\017\001\001\000\002\001\001\000\024\004\055\006" +
    "\057\007\061\010\056\011\054\012\062\013\066\017\063" +
    "\021\064\001\001\000\002\001\001\000\024\003\156\004" +
    "\006\006\010\007\011\010\007\011\004\013\022\017\016" +
    "\021\017\001\001\000\024\004\055\006\057\007\061\010" +
    "\056\011\054\012\062\013\066\017\063\021\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\211\004\006\006\010" +
    "\007\011\010\007\011\004\013\022\017\016\021\017\001" +
    "\001\000\002\001\001\000\024\004\055\006\057\007\061" +
    "\010\056\011\054\012\062\013\066\017\063\021\064\001" +
    "\001\000\002\001\001\000\024\003\156\004\006\006\010" +
    "\007\011\010\007\011\004\013\022\017\016\021\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\247\001\001\000\004\014\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\236\004\006\006\010\007" +
    "\011\010\007\011\004\013\022\017\016\021\017\001\001" +
    "\000\002\001\001\000\024\004\055\006\057\007\061\010" +
    "\056\011\054\012\062\013\066\017\063\021\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\252\004\006\006\010\007\011\010\007" +
    "\011\004\013\022\017\016\021\017\001\001\000\024\004" +
    "\055\006\057\007\061\010\056\011\054\012\062\013\066" +
    "\017\063\021\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\256\004\006\006\010\007\011\010\007" +
    "\011\004\013\022\017\016\021\017\001\001\000\024\004" +
    "\055\006\057\007\061\010\056\011\054\012\062\013\066" +
    "\017\063\021\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\266\004\006\006\010\007" +
    "\011\010\007\011\004\013\022\017\016\021\017\001\001" +
    "\000\024\004\055\006\057\007\061\010\056\011\054\012" +
    "\062\013\066\017\063\021\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\274\004\006\006\010\007\011\010\007\011\004" +
    "\013\022\017\016\021\017\001\001\000\024\004\055\006" +
    "\057\007\061\010\056\011\054\012\062\013\066\017\063" +
    "\021\064\001\001\000\002\001\001\000\004\014\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\306\004\006\006\010\007\011\010\007\011\004" +
    "\013\022\017\016\021\017\001\001\000\024\004\055\006" +
    "\057\007\061\010\056\011\054\012\062\013\066\017\063" +
    "\021\064\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINT ::= Puts Comillas Identificador Identificador Identificador Identificador Identificador Dolar Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINT ::= Puts Comillas Identificador Identificador Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINT ::= Puts Comillas Identificador Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRINT ::= Puts Comillas Identificador Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PRINT ::= Puts Comillas Identificador Identificador Identificador Identificador Dolar Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRINT ::= Puts Comillas Identificador Identificador Dolar Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRINT ::= Puts Comillas SENTENCIA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PRINT ::= Puts Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_SWITCH ::= Default Llave_a Puts Comillas Identificador Identificador Identificador Identificador Identificador Identificador Comillas Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_SWITCH ::= Default Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_SWITCH ::= Comillas Numero Comillas Llave_a Puts Identificador Identificador Identificador Identificador Identificador Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_SWITCH ::= Comillas Numero Comillas Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCH ::= Switch Identificador Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PROC ::= Proc Identificador Llave_a Identificador Identificador Llave_c Llave_a SENTENCIA Return Dolar Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR ::= For Llave_a SENTENCIA Llave_c Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a Incrementar Identificador Llave_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WHILE ::= While Comillas SENTENCIA_BOOLEANA Comillas Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= While Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Dolar Identificador Op_relacional Dolar Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Dolar Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= If Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= If Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a Continue Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= If Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a SENTENCIA Continue Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= If Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a SENTENCIA Break Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= If Llave_a SENTENCIA_BOOLEANA Llave_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Set Identificador Corchete_a Expr Llave_a Dolar Identificador Op_aritmetico Numero Llave_c Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Set Identificador Corchete_a Expr Dolar Identificador Op_aritmetico Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Set Identificador Corchete_a Expr Dolar Identificador Op_aritmetico Dolar Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Set Identificador Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Set Identificador Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= Comentarios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

